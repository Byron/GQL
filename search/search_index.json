{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"GQL - Git Query Language <p>GQL is a query language with a syntax very similar to SQL with a tiny engine to perform queries on .git files instance of database files, the engine executes the query on the fly without the need to create database files or convert .git files into any other format, note that all Keywords in GQL are case-insensitive similar to SQL.</p>"},{"location":"#samples","title":"Samples","text":"<pre><code>SELECT * FROM refs WHERE type = \"branch\"\nSELECT * FROM refs WHERE ORDER BY type\nSELECT * FROM commits\nSELECT name, email FROM commits\nSELECT name, email FROM commits ORDER BY name DES\nSELECT name, email FROM commits WHERE name contains \"gmail\" ORDER BY name\nSELECT * FROM commits WHERE name.lower = \"amrdeveloper\"\nSELECT * FROM branches\nSELECT * FROM branches WHERE ishead = \"true\"\nSELECT * FROM branches WHERE name ends_with \"master\"\nSELECT * FROM branches WHERE name contains \"origin\"\nSELECT * FROM tags\nSELECT * FROM tags OFFSET 1 LIMIT 1\n</code></pre>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#download-executable","title":"Download executable","text":"<p>From Github repository page you can download the right executable for your OS and Arch from the latest release</p>"},{"location":"setup/#build-gql-from-source-code","title":"Build GQL From source code","text":"<pre><code>git clone https://github.com/amrdeveloper/gql\ncd gql\ncargo run &lt;repository_path&gt;\n</code></pre>"},{"location":"expression/binary/","title":"Binary","text":"<p>A binary expression contains two operands separated by one operator</p>"},{"location":"expression/binary/#arithmetic-expression","title":"Arithmetic Expression","text":"<p>Used to perform arithmetic operators on number types.</p> <ul> <li><code>+</code> Addition.</li> <li><code>-</code> Subtraction.</li> <li><code>*</code> Multiplication.</li> <li><code>/</code> Division.</li> </ul>"},{"location":"expression/binary/#comparison-expression","title":"Comparison Expression","text":"<ul> <li><code>=</code> used to check if field equal to expected value.</li> <li><code>!</code> used to check if field not equal to expected value.</li> <li><code>&gt;</code> used to check if field greater than expected value.</li> <li><code>&gt;=</code> used to check if field greater than or equals expected value.</li> <li><code>&lt;</code> used to check if field less than expected value.</li> <li><code>&lt;=</code> used to check if field less than or equals expected value.</li> </ul>"},{"location":"expression/binary/#string-checks-expression","title":"String checks Expression","text":"<ul> <li><code>contains</code> used to check that field contains value.</li> <li><code>starts_with</code> used to check that field starts with value.</li> <li><code>ends_with</code> used to check that field ends with value.</li> <li><code>matches</code> used to check that field matches regex format.</li> </ul>"},{"location":"expression/binary/#logical-expressions","title":"Logical Expressions","text":"<ul> <li><code>|</code> or <code>or</code>: used to calculate or between two booleans,</li> <li><code>&amp;</code> or <code>and</code>: used to calculate and between two booleans,</li> <li><code>^</code> or <code>xor</code>: used to calculate xor between two booleans,</li> </ul>"},{"location":"expression/binary/#between-expression","title":"Between Expression","text":"<p>Used to check if value is between range start and end included</p> <pre><code>SELECT commit_count FROM branches WHERE commit_count BETWEEN 2 .. 30000\n</code></pre>"},{"location":"expression/unary/","title":"Unary","text":"<p>The unary expression is an expression the prefixed with operators</p>"},{"location":"expression/unary/#not-expression","title":"Not Expression","text":"<p>The logical NOT ( ! ) operator takes truth to falsity and vice versa. It is typically used with boolean</p> <pre><code>SELECT * FROM branches WHERE !is_remote\nSELECT * FROM branches WHERE !is_head\n</code></pre>"},{"location":"function/aggregations/","title":"Aggregations","text":"<p>An aggregate function in GQL performs a calculation on multiple values and returns a single value</p>"},{"location":"function/aggregations/#aggregation-max","title":"Aggregation <code>max</code>","text":"<p>Accept field name with <code>NUMBER</code> to calculate the maximum value of it for all elements until the current one</p> <pre><code>SELECT name, commit_count, max(commit_count) FROM branches\n</code></pre>"},{"location":"function/aggregations/#aggregation-count","title":"Aggregation <code>count</code>","text":"<p>The function COUNT() is an aggregate function that returns the number of items in a group</p> <pre><code>SELECT name, max(name) FROM commits GROUP BY name\n</code></pre>"},{"location":"function/transformations/","title":"Transformation","text":"<p>An transformation function in GQL performs a transformation on single value and returns a single value</p>"},{"location":"function/transformations/#string-lower","title":"String lower","text":"<p>Transform String value to lower case</p> <pre><code>SELECT * FROM commits where name.lower = \"amrdeveloper\"\n</code></pre>"},{"location":"function/transformations/#string-upper","title":"String upper","text":"<p>Transform String value to upper case</p> <pre><code>SELECT * FROM commits where name.upper = \"AMRDEVELOPER\"\n</code></pre>"},{"location":"function/transformations/#string-trim","title":"String trim","text":"<p>Transform String value to String with removes whitespace from the start and eng of it</p> <pre><code>SELECT * FROM commits where name.trim = \"\"\n</code></pre>"},{"location":"function/transformations/#string-length","title":"String length","text":"<p>Transform String value to the length of it</p> <pre><code>SELECT * FROM commits where name.length &gt; 0\n</code></pre>"},{"location":"statement/group_by/","title":"Group by","text":"<p>The <code>GROUP BY</code> statement groups rows that have the same values into summary rows, like \"find the number of commits for each username or email\".</p> <pre><code>SELECT * FROM commits GROUP BY name\n</code></pre>"},{"location":"statement/having/","title":"Having","text":"<p>The <code>HAVING</code> statement is very similar to <code>WHERE</code> expect that it evaluated after the <code>GROUP BY</code> statement</p> <pre><code>SELECT * FROM commits GROUP BY name HAVING name = \"AmrDeveloper\"\nSELECT * FROM branches GROUP BY name HAVING ishead = \"true\"\n</code></pre>"},{"location":"statement/limit_and_offset/","title":"Limit & Offset","text":"<p>The <code>LIMIT</code> statement used to limit the number of end result</p> <pre><code>SELECT * FROM commits LIMIT 10\nSELECT * FROM branches LIMIT 15\n</code></pre> <p>The <code>OFFSET</code> statement specifies how many rows to skip at the beginning of the result set</p> <pre><code>SELECT * FROM commits OFFSET 10\nSELECT * FROM branches OFFSET 15\n</code></pre> <p>You can mix the offset and limit statements</p> <pre><code>SELECT * FROM commits OFFSET 10 LIMIT 10\nSELECT * FROM branches OFFSET 15 LIMIT 15\n</code></pre>"},{"location":"statement/order_by/","title":"Ordre by","text":"<p>The <code>ORDER BY</code> keyword is used to sort the result-set in ascending or descending order.</p> <pre><code>SELECT name, email FROM commits ORDER BY name\nSELECT name, email FROM commits ORDER BY name ASC\nSELECT name, email FROM commits ORDER BY name DES\n</code></pre>"},{"location":"statement/select/","title":"Select","text":"<p>The <code>SELECT</code> statement is used to query data from a single table</p> <p>For example to select all fields from commits table.</p> <pre><code>SELECT * FROM commits\n</code></pre> <p>Or Selecting just title and message</p> <pre><code>SELECT title message FROM commits\n</code></pre> <p>You can use Aggregation function in the select statement to perform function on all data until the current one</p> <pre><code>SELECT count(name) FROM commits\n</code></pre> <p>You can alias the column name only in this query by using <code>as</code> keyword for example</p> <pre><code>SELECT title as tt message FROM commits\nSELECT name, commit_count, max(commit_count) AS max_count message FROM branches\n</code></pre>"},{"location":"statement/where/","title":"Where","text":"<p>The <code>WHERE</code> statement is used to fillter the data by one or more conditions</p> <p>For example to select all commits for a specific username</p> <pre><code>SELECT * FROM commits where name = \"AmrDeveloper\"\nSELECT * FROM commits WHERE name contains \"gmail\"\nSELECT * FROM branches WHERE ishead = \"true\"\nSELECT * FROM branches WHERE name ends_with \"master\"\nSELECT * FROM branches WHERE name contains \"origin\"\n</code></pre> <p>You can add Unary and Binary expressions, but you can use Aggregation functions inside the Where statement, because it calculated after the group by statement.</p>"},{"location":"structure/tables/","title":"Tables","text":""},{"location":"structure/tables/#gql-tables","title":"GQL Tables","text":""},{"location":"structure/tables/#references-table","title":"References table","text":"Name Type Description name Text Reference name full_name Text Reference full name type Text Reference type"},{"location":"structure/tables/#commits-table","title":"Commits table","text":"Name Type Description title Text Commit title message Text Commit full message name Text Author name email Text Author email time Date Commit date"},{"location":"structure/tables/#branches-table","title":"Branches table","text":"Name Type Description name Text Branch name commit_count Number Number of commits in this branch is_head Bool Is the head branch is_remote Bool Is a remote branch"},{"location":"structure/tables/#tags-table","title":"Tags table","text":"Name Type Description name Text Tag name"},{"location":"structure/types/","title":"Types","text":"<p>The GQL has a basic type system with only four types to be used for safe functions call and expressions.</p>"},{"location":"structure/types/#types-informations","title":"Types Informations","text":"Name Description Text Used to represnt string literal Number Used to represent integers Boolean Used to represent boolean value Date Used for timestamp"}]}